apply plugin: 'com.android.application'

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.0"

    defaultConfig {
        applicationId "net.nitroservices.rezan.mlforandroidmalwaredetection"
        minSdkVersion 16
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"

        // Enabling multidex support.
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dexOptions {
        //incremental = true;
        preDexLibraries = false;
        javaMaxHeapSize = "4g"
    }

    packagingOptions {
        exclude 'META-INF/NOTICE.txt'   // will not include NOTICE file
        exclude 'META-INF/LICENSE.txt'  // will not include LICENSE file
    }
	
	// ndk gradle support is still very bad so it's built the regular ndk-build
	sourceSets.main.jni.srcDirs = ['src/main/jni']
	
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:24.1.1'
    compile 'com.android.support:design:24.1.1'
    compile files('libs/wekaSTRIPPED.jar')
}







publish.dependsOn assembleRelease
bintrayUpload.dependsOn assembleRelease

ext {
    sqliteDistributionUrl = 'https://www.sqlite.org/2016/sqlite-amalgamation-3140000.zip'
    pomXml = {
        resolveStrategy = Closure.DELEGATE_FIRST
        name project.name
        description project.description
        url 'https://github.com/requery/sqlite-android'
        scm {
            url 'https://github.com/requery/sqlite-android.git'
            connection 'scm:git:git://github.com/requery/sqlite-android.git'
            developerConnection 'scm:git:git@github.com/requery/sqlite-android.git'
        }
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/license/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }
        developers {
            developer {
                id 'npurushe'
                name 'Nikhil Purushe'
            }
        }
    }
}

android.libraryVariants
publishing {
    publications {
        maven(MavenPublication) {
            groupId project.group
            artifactId project.name
            version project.version
            artifact "build/outputs/aar/${project.name}-release.aar"
            artifact sourcesJar
            artifact javadocJar
            pom.withXml {
                asNode().children().last() + project.pomXml
                def dependencies = asNode().appendNode('dependencies')
                configurations.compile.allDependencies.each {
                    def dependency = dependencies.appendNode('dependency')
                    dependency.appendNode('groupId', it.group)
                    dependency.appendNode('artifactId', it.name)
                    dependency.appendNode('version', it.version)
                    dependency.appendNode('scope', 'compile')
                }
            }
        }
    }
}

Properties properties = new Properties()
File localProperties = project.rootProject.file('local.properties')
if (localProperties.exists()) {
    properties.load(localProperties.newDataInputStream())
}

bintray {
    user = properties.getProperty('bintray.user')
    key = properties.getProperty('bintray.apikey')
    publications = ['maven']
    pkg {
        repo = 'requery'
        name = 'sqlite-android'
        userOrg = 'requery'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/requery/sqlite-android.git'
        version {
            name = project.version
            desc = project.description
            released = new Date()
        }
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
    failOnError false;
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task downloadSqlite(type: Download) {
    src project.sqliteDistributionUrl
    dest 'src/main/jni/sqlite.zip'
}

task installSqlite(dependsOn: downloadSqlite, type: Copy) {
    from zipTree(downloadSqlite.dest).matching {
        include '*/sqlite3.*'
        eachFile { it.setPath(it.getName()) }
    }
    into 'src/main/jni/sqlite'
}

def ndkDir = System.getenv('ANDROID_NDK_HOME') ?: properties.getProperty('ndk.dir')

task buildSqlite(dependsOn: installSqlite, type: Exec) {
    workingDir 'src/main/jni'
    commandLine ndkDir + '/ndk-build'
}


