package net.nitroservices.rezan.mlforandroidmalwaredetection;

import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.util.Log;

import java.io.FileDescriptor;
import java.lang.reflect.Method;

/**
 * Created by rezan on 11/9/16.
 */

public class PCVPNSvcCommonMethods {


    private static final String TAG = "PCVPNSvcCommonMethods";




    public static String getActiveNetworkType(Context context) {

        NetworkInfo activeNetworkInfo =
                ((ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE))
                        .getActiveNetworkInfo();

        if (activeNetworkInfo == null) {
            return "UNKNOWN";
        }

        int type = activeNetworkInfo.getType();
        if (type == 1) {
            return "WIFI";
        }

        if (type != 0) {
            return "UNKNOWN";
        }


        int subtype = activeNetworkInfo.getSubtype();
        activeNetworkInfo.getSubtypeName();

        switch (subtype) {
            case 1:
                return "GRPS";
            case 2:
                return "EDGE";
            case 3:
                return "UMTS";
            case 4:
                return "CDMA";
            case 5:
                return "EVDO_0";
            case 6:
                return "EVDO_A";
            case 7:
                return "1xRTT";
            case 8:
                return "HSDPA";
            case 9:
                return "HSUPA";
            case 10:
                return "HSPA";
            case 11:
                return "IDEN";
            case 12:
                return "EVDO_B";
            case 13:
                return "LTE";
            case 14:
                return "EHRPD";
            case 15:
                return "HSPAP";
            default:
                return "UNKNOWN";

        }

    }








    public static void setBlocking(FileDescriptor fileDescriptor, boolean z) {


        // ???????????????????????????????????????????

        final String strIoUtils = "libcore.io.IoUtils";
        final String strIoUtilsSetBlocking =
                strIoUtils + " setBlocking";

        try {
            Class cls = Class.forName(strIoUtils);
            Log.i(TAG, strIoUtils + " class found");


            Method declaredMethod =
                    cls.getDeclaredMethod(
                            "setBlocking",
                            new Class[] {FileDescriptor.class, Boolean.TYPE});

            Log.i(TAG, strIoUtilsSetBlocking + " method found");

            declaredMethod.invoke(null, new Object[] {fileDescriptor, Boolean.valueOf(z)});
            Log.i(TAG, strIoUtilsSetBlocking + " invoke succeed");

        } catch (ClassNotFoundException ex) {
            Log.w(TAG, strIoUtils + " class not found");

        } catch (NoSuchMethodException ex) {
            Log.w(TAG, strIoUtilsSetBlocking + " method not found");

        } catch (Exception ex) {
            Log.w(TAG, strIoUtilsSetBlocking + " invoke failed");

        }
    }



}
