package net.nitroservices.rezan.mlforandroidmalwaredetection;



import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.DatabaseUtils;
import android.database.MatrixCursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.net.TrafficStats;
import android.util.Log;

import java.util.ArrayList;
import java.util.HashMap;

/**
 * Created by rezan on 10/13/16.
 */

// http://www.tutorialspoint.com/android/android_sqlite_database.htm

public class DBHelper extends SQLiteOpenHelper {

    public static final String DATABASE_NAME = "AllUsageStats.db";


    public static final String NET_USAGE_TABLE_NAME = "net_usage";
    public static final String NET_USAGE_COLUMN_APP_NAME = "app_name";

    public static final String NET_USAGE_COLUMN_ID = "id";
    public static final String NET_USAGE_COLUMN_PACKAGE_NAME = "package_name";
    public static final String NET_USAGE_COLUMN_RECEIVED_BYTES = "received_bytes";
    public static final String NET_USAGE_COLUMN_SENT_BYTES = "sent_bytes";
    public static final String NET_USAGE_COLUMN_SENT_PACKET_COUNT = "sent_packet_count";
    public static final String NET_USAGE_COLUMN_RECEIVED_PACKET_COUNT = "received_packet_count";


    public static final String PACKET_TABLE_NAME = "packets";

    public static final String PACKET_COLUMN_ID = "id";
    public static final String PACKET_COLUMN_SRC_IP = "src_ip";
    public static final String PACKET_COLUMN_SRC_PORT = "src_port";
    public static final String PACKET_COLUMN_DEST_IP = "dest_ip";
    public static final String PACKET_COLUMN_DEST_PORT = "dest_port";


    // public static final String BATTERY_USAGE_TABLE_NAME = "BatteryUsageStats";


    public DBHelper(Context context){
        super(context, DATABASE_NAME, null, 1);
    }

    @Override
    public void onCreate(SQLiteDatabase db) {

        db.execSQL(
                "create table " + NET_USAGE_TABLE_NAME +
                        " (id integer primary key, " +
                        NET_USAGE_COLUMN_APP_NAME + " text, " +
                        NET_USAGE_COLUMN_PACKAGE_NAME + " text, " +
                        NET_USAGE_COLUMN_RECEIVED_BYTES + " text, " +
                        NET_USAGE_COLUMN_SENT_BYTES + " text, " +
                        NET_USAGE_COLUMN_RECEIVED_PACKET_COUNT + " text, " +
                        NET_USAGE_COLUMN_SENT_PACKET_COUNT + " text)"
        );

        db.execSQL(
                "create table " + PACKET_TABLE_NAME +
                        " (id integer primary key, " +
                        NET_USAGE_COLUMN_APP_NAME + " text, " +
                        NET_USAGE_COLUMN_PACKAGE_NAME + " text, " +
                        PACKET_COLUMN_SRC_IP + " text, " +
                        PACKET_COLUMN_SRC_PORT + " text, " +
                        PACKET_COLUMN_DEST_IP + " text, " +
                        PACKET_COLUMN_DEST_PORT + " text)"
        );




    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {

        db.execSQL("DROP TABLE IF EXISTS " + NET_USAGE_TABLE_NAME);
        db.execSQL("DROP TABLE IF EXISTS " + PACKET_TABLE_NAME);
        onCreate(db);

    }


    public boolean insertNetUsageEntry(String appName, String packageName, String receivedBytes, String sentBytes, String receivedPacketCount, String sentPacketCount) {

        SQLiteDatabase db = getWritableDatabase();

        ContentValues contentValues = new ContentValues();
        contentValues.put(NET_USAGE_COLUMN_APP_NAME, appName);
        contentValues.put(NET_USAGE_COLUMN_PACKAGE_NAME, packageName);
        contentValues.put(NET_USAGE_COLUMN_RECEIVED_BYTES, receivedBytes);
        contentValues.put(NET_USAGE_COLUMN_SENT_BYTES, sentBytes);
        contentValues.put(NET_USAGE_COLUMN_RECEIVED_PACKET_COUNT, receivedPacketCount);
        contentValues.put(NET_USAGE_COLUMN_SENT_PACKET_COUNT, sentPacketCount);

        db.insert(NET_USAGE_TABLE_NAME, null, contentValues);

        return true;
    }

    public boolean insertPacketEntry(String appName, String packageName, String srcIP, String srcPort, String destIP, String desPort) {

        SQLiteDatabase db = getWritableDatabase();

        ContentValues contentValues = new ContentValues();
        contentValues.put(NET_USAGE_COLUMN_APP_NAME, appName);
        contentValues.put(NET_USAGE_COLUMN_PACKAGE_NAME, packageName);
        contentValues.put(PACKET_COLUMN_SRC_IP, srcIP);
        contentValues.put(PACKET_COLUMN_SRC_PORT, srcPort);
        contentValues.put(PACKET_COLUMN_DEST_IP, destIP);
        contentValues.put(PACKET_COLUMN_DEST_PORT, desPort);

        db.insert(PACKET_TABLE_NAME, null, contentValues);

        return true;
    }


    public Cursor getNetUsageEntry(int id) {

        SQLiteDatabase db = getReadableDatabase();
        return db.rawQuery("select * from " + NET_USAGE_TABLE_NAME + " where id " + NET_USAGE_COLUMN_ID + "", null);
    }


    public Cursor getPacketEntry(int id) {

        SQLiteDatabase db = getReadableDatabase();
        return db.rawQuery("select * from " + PACKET_TABLE_NAME + " where id " + PACKET_COLUMN_ID + "", null);
    }


    public int numberOfNetUsageEntryRows() {

        SQLiteDatabase db = getReadableDatabase();
        return (int)DatabaseUtils.queryNumEntries(db, NET_USAGE_TABLE_NAME);
    }

    public int numberOfPacketEntryRows() {

        SQLiteDatabase db = getReadableDatabase();
        return (int)DatabaseUtils.queryNumEntries(db, PACKET_TABLE_NAME);
    }


    public boolean updateNetUsageEntry(Integer id, String appName, String packageName, String receivedBytes, String sentBytes, String receivedPacketCount, String sentPacketCount) {

        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues contentValues = new ContentValues();
        contentValues.put(NET_USAGE_COLUMN_APP_NAME, appName);
        contentValues.put(NET_USAGE_COLUMN_PACKAGE_NAME, packageName);
        contentValues.put(NET_USAGE_COLUMN_RECEIVED_BYTES, receivedBytes);
        contentValues.put(NET_USAGE_COLUMN_SENT_BYTES, sentBytes);
        contentValues.put(NET_USAGE_COLUMN_RECEIVED_PACKET_COUNT, receivedPacketCount);
        contentValues.put(NET_USAGE_COLUMN_SENT_PACKET_COUNT, sentPacketCount);

        db.update(NET_USAGE_TABLE_NAME, contentValues, "id = ? ", new String[] {Integer.toString(id)});

        return true;
    }

    public boolean updatePacketEntry(Integer id, String appName, String packageName, String srcIP, String srcPort, String destIP, String destPort) {

        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues contentValues = new ContentValues();
        contentValues.put(NET_USAGE_COLUMN_APP_NAME, appName);
        contentValues.put(NET_USAGE_COLUMN_PACKAGE_NAME, packageName);
        contentValues.put(PACKET_COLUMN_SRC_IP, srcIP);
        contentValues.put(PACKET_COLUMN_SRC_PORT, srcPort);
        contentValues.put(PACKET_COLUMN_DEST_IP, destIP);
        contentValues.put(PACKET_COLUMN_DEST_PORT, destPort);

        db.update(PACKET_TABLE_NAME, contentValues, "id = ? ", new String[] {Integer.toString(id)});

        return true;
    }


    public Integer deleteNetUsageEntry(Integer id) {

        SQLiteDatabase db = getWritableDatabase();

        return db.delete(NET_USAGE_TABLE_NAME, "id = ? ", new String[] {Integer.toString(id)});
    }

    public Integer deletePacketEntry(Integer id) {

        SQLiteDatabase db = getWritableDatabase();

        return db.delete(PACKET_TABLE_NAME, "id = ? ", new String[] {Integer.toString(id)});
    }



    public ArrayList<String> getAllNetUsageEntries() {

        ArrayList<String> arrayList = new ArrayList<String>();

        SQLiteDatabase db = getReadableDatabase();
        Cursor res = db.rawQuery("select * from " + NET_USAGE_TABLE_NAME, null);
        res.moveToNext();

        while (!res.isAfterLast()) {
            arrayList.add(res.getString(res.getColumnIndex(NET_USAGE_COLUMN_APP_NAME)));
            res.moveToNext();
        }


        return arrayList;
    }

    public ArrayList<String> getAllPacketEntries() {

        ArrayList<String> arrayList = new ArrayList<String>();

        SQLiteDatabase db = getReadableDatabase();
        Cursor res = db.rawQuery("select * from " + PACKET_TABLE_NAME, null);
        res.moveToNext();

        while (!res.isAfterLast()) {
            arrayList.add(res.getString(res.getColumnIndex(NET_USAGE_COLUMN_APP_NAME)));
            res.moveToNext();
        }


        return arrayList;
    }



    public ArrayList<Cursor> getData(String Query){
        //get writable database
        SQLiteDatabase sqlDB = this.getWritableDatabase();
        String[] columns = new String[] { "mesage" };
        //an array list of cursor to save two cursors one has results from the query
        //other cursor stores error message if any errors are triggered
        ArrayList<Cursor> alc = new ArrayList<Cursor>(2);
        MatrixCursor Cursor2= new MatrixCursor(columns);
        alc.add(null);
        alc.add(null);


        try{
            String maxQuery = Query ;
            //execute the query results will be save in Cursor c
            Cursor c = sqlDB.rawQuery(maxQuery, null);


            //add value to cursor2
            Cursor2.addRow(new Object[] { "Success" });

            alc.set(1,Cursor2);
            if (null != c && c.getCount() > 0) {


                alc.set(0,c);
                c.moveToFirst();

                return alc ;
            }
            return alc;
        } catch(SQLException sqlEx){
            Log.d("printing exception", sqlEx.getMessage());
            //if any exceptions are triggered save the error message to cursor an return the arraylist
            Cursor2.addRow(new Object[] { ""+sqlEx.getMessage() });
            alc.set(1,Cursor2);
            return alc;
        } catch(Exception ex){

            Log.d("printing exception", ex.getMessage());

            //if any exceptions are triggered save the error message to cursor an return the arraylist
            Cursor2.addRow(new Object[] { ""+ex.getMessage() });
            alc.set(1,Cursor2);
            return alc;
        }


    }


}
