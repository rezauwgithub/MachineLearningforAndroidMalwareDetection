package net.nitroservices.rezan.mlforandroidmalwaredetection;



import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.DatabaseUtils;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

import java.util.ArrayList;
import java.util.HashMap;

/**
 * Created by rezan on 10/13/16.
 */

// http://www.tutorialspoint.com/android/android_sqlite_database.htm

public class DBHelper extends SQLiteOpenHelper {

    public static final String DATABASE_NAME = "NetworkStats.db";

    public static final String PACKETS_TABLE_NAME = "packets";;
    public static final String PACKETS_COLUMN_ID = "id";
    public static final String PACKETS_COLUMN_APP_NAME = "app_name";
    public static final String PACKETS_COLUMN_SRC_IP = "src_ip";
    public static final String PACKETS_COLUMN_SRC_PORT = "src_port";
    public static final String PACKETS_COLUMN_DEST_IP = "dest_ip";
    public static final String PACKETS_COLUMN_DEST_PORT = "dest_port";


    public DBHelper(Context context){
        super(context, DATABASE_NAME, null, 1);
    }

    @Override
    public void onCreate(SQLiteDatabase db) {

        db.execSQL(
                "create table " + PACKETS_TABLE_NAME +
                        " (id integer primary key, " +
                        PACKETS_COLUMN_APP_NAME + " text, " +
                        PACKETS_COLUMN_SRC_IP + " text, " +
                        PACKETS_COLUMN_SRC_PORT + " text, " +
                        PACKETS_COLUMN_DEST_IP + " text, " +
                        PACKETS_COLUMN_DEST_PORT + " text)"
        );




    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {

        db.execSQL("DROP TABLE IF EXISTS " + PACKETS_TABLE_NAME);
        onCreate(db);

    }


    public boolean insertEntry(String appName, String srcIP, String srcPort, String destIP, String desPort) {

        SQLiteDatabase db = getWritableDatabase();

        ContentValues contentValues = new ContentValues();
        contentValues.put(PACKETS_COLUMN_APP_NAME, appName);
        contentValues.put(PACKETS_COLUMN_SRC_IP, srcIP);
        contentValues.put(PACKETS_COLUMN_SRC_PORT, srcPort);
        contentValues.put(PACKETS_COLUMN_DEST_IP, destIP);
        contentValues.put(PACKETS_COLUMN_DEST_PORT, desPort);

        db.insert(PACKETS_TABLE_NAME, null, contentValues);

        return true;
    }


    public Cursor getData(int id) {

        SQLiteDatabase db = getReadableDatabase();
        return db.rawQuery("select * from " + PACKETS_TABLE_NAME + " where id " + PACKETS_COLUMN_ID + "", null);
    }


    public int numberOfRows() {

        SQLiteDatabase db = getReadableDatabase();
        return (int) DatabaseUtils.queryNumEntries(db, PACKETS_TABLE_NAME);
    }


    public boolean updateEntry(Integer id, String appName, String srcIP, String srcPort, String destIP, String destPort) {

        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues contentValues = new ContentValues();
        contentValues.put(PACKETS_COLUMN_APP_NAME, appName);
        contentValues.put(PACKETS_COLUMN_SRC_IP, srcIP);
        contentValues.put(PACKETS_COLUMN_SRC_IP, srcPort);
        contentValues.put(PACKETS_COLUMN_DEST_IP, destIP);
        contentValues.put(PACKETS_COLUMN_DEST_PORT, destPort);

        db.update(PACKETS_TABLE_NAME, contentValues, "id = ? ", new String[] {Integer.toString(id)});

        return true;
    }


    public Integer deleteEntry(Integer id) {

        SQLiteDatabase db = getWritableDatabase();

        return db.delete(PACKETS_TABLE_NAME, "id = ? ", new String[] {Integer.toString(id)});
    }


    public ArrayList<String> getAllEntries() {

        ArrayList<String> arrayList = new ArrayList<String>();

        SQLiteDatabase db = getReadableDatabase();
        Cursor res = db.rawQuery("select * from " + PACKETS_TABLE_NAME, null);
        res.moveToNext();

        while (res.isAfterLast() == false) {
            arrayList.add(res.getString(res.getColumnIndex(PACKETS_COLUMN_APP_NAME)));
            res.moveToNext();
        }


        return arrayList;
    }

}
