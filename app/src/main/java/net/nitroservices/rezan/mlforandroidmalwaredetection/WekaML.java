package net.nitroservices.rezan.mlforandroidmalwaredetection;

import android.content.Context;
import android.content.res.AssetManager;
import android.util.Log;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.InputStreamReader;
import java.io.Reader;

import weka.classifiers.Classifier;
import weka.classifiers.Evaluation;
import weka.classifiers.evaluation.NominalPrediction;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.PART;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.J48;
import weka.core.FastVector;
import weka.core.Instances;

/**
 * Created by rezan on 8/8/2016.
 */
public class WekaML {


    public static final String TAG = "WekaML";


    private static BufferedReader readDataFile(String fileName) {

        BufferedReader inputReader = null;

        try {

            inputReader = new BufferedReader(new FileReader(fileName));

        } catch (FileNotFoundException e) {

            Log.i(TAG, "File not found: " + fileName);
            e.printStackTrace();
        }


        return inputReader;
    }


    private static Evaluation classify(Classifier model,
                                      Instances trainingSet,
                                      Instances testingSet)
                                        throws Exception {

        Evaluation evaluation = new Evaluation(trainingSet);

        model.buildClassifier(trainingSet);
        evaluation.evaluateModel(model, testingSet);


        return evaluation;
    }


    private static double calculateAccuracy(FastVector predictions) {

        double correct = 0;

        for (int i = 0; i < predictions.size(); i++) {
            NominalPrediction np = (NominalPrediction)predictions.elementAt(i);

            if (np.predicted() == np.actual()) {
                correct++;
            }

        }

        return 100 * correct / predictions.size();
    }


    private static Instances[][] crossValidationSplit(Instances data,
                                                     int numberOfFolds) {

        Instances[][] split = new Instances[2][numberOfFolds];

        for (int i = 0; i < numberOfFolds; i++) {
            split[0][i] = data.trainCV(numberOfFolds, i);
            split[1][i] = data.testCV(numberOfFolds, i);
        }

        return split;
    }


    public static void doMLWork(final Context context, final String fileName) throws Exception {


        AssetManager assetManager = context.getAssets();


        Reader reader = new InputStreamReader(assetManager.open(fileName));
        BufferedReader dataFile = new BufferedReader(reader);

        Instances data = new Instances(dataFile);

        // Log.i(TAG, "Confirming read from arff file from assets " + data.toString());

        data.setClassIndex(data.numAttributes() - 1);

        // Do 10-split cross validation
        Instances[][] split = crossValidationSplit(data, 10);

        // Separate split into training and testing arrays
        Instances[] trainingSplits = split[0];
        Instances[] testingSplits = split[1];

        // Use a set of classifiers
        Classifier[] models = {
                new J48(),              // a decision tree
                new PART(),
                new DecisionTable(),    // decision table majority classifier
                new DecisionStump()     // one-level decision tree
        };

        // Run for each model
        for (int j = 0; j < models.length; j++) {

            // Collect every group of predictions for current model in a FastVector
            FastVector predictions = new FastVector();

            // For each training-testing split pair, train and test the classifier
            for (int i = 0; i < trainingSplits.length; i++) {

                Evaluation validation = classify(models[j], trainingSplits[i], testingSplits[i]);

                predictions.appendElements(validation.predictions());

            }


            // Calculate overall accuracy of current classifier on all splits
            double accuracy = calculateAccuracy(predictions);

            Log.i(TAG, "accuracy output test " + accuracy);

            // Output current classifier's name and accuracy in a complicated,
            // but nice-looking way.
            Log.i(TAG, "Accuracy of " + models[j].getClass().getSimpleName() + ": "
                        + String.format("%.2f%%", accuracy)
                        + "\n--------------------------------");



        }

    }

}
