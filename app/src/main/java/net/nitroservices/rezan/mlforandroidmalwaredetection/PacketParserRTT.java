package net.nitroservices.rezan.mlforandroidmalwaredetection;

import android.util.Log;

import java.util.Arrays;

/**
 * Created by rezan on 11/18/16.
 */

public class PacketParserRTT {

    private static final String TAG = "PacketParserRTT";

    public byte[] a;

    public int b;

    public boolean c;
    public boolean d;

    public int e;
    public int f;
    public int g;
    public int h;
    public int i;

    public byte[] j;
    public byte[] k;

    public int l;
    public int m;
    public int n;
    public int o;
    public int p;

    public byte q;

    public int r;


    public PacketParserRTT(int i) {
        a = new byte[i];
        b = i;
        c = false;
        k = null;
        j = null;
        d = false;
    }


    public static short parseFrame(int i, byte[] byteArray, int i2, int i3) {
        int i4 = i2 + (i3 & -2);
        int i5 = i;

        while (i2 < i4) {
            i5 += ((byteArray[i2] & 255) << 8) | (byteArray[i2 + 1] & 255);
            i2 += 2;
        }

        if ((i3 & 1) != 0) {
            i5 += (byteArray[i2] & 255) << 8;
        }

        i5 = (i5 & 65535) + ((i5 >> 16) & 65535);


        return (short)((i5 + (64435 & (i5 >> 16))) ^ -1);
    }


    public static short a(byte[] byteArray, int i, int i2) {

        return parseFrame(0, byteArray, i, i2);
    }


    public static short parseFrame(byte[] byteArray, int i, int i2, byte[] byteArray2, byte[] byteArray3) {

        return parseFrame(((((i2 + 6) +
                (((byteArray2[0] & 255) << 8) |
                (byteArray2[1] & 255))) +
                        (((byteArray2[2] & 255) << 8) |
                                (byteArray2[3] & 255))) +
                (((byteArray3[0] & 255) << 8) |
                        (byteArray3[1] & 255))) +
                (((byteArray3[2] & 255) << 8) |
                        (byteArray3[3] & 255)),
                byteArray, i, i2);
    }

    public static short b(byte[] byteArray, int i, int i2, byte[] byteArray2, byte[] byteArray3) {

        return parseFrame(((((i2 + 17) +
                (((byteArray2[0] & 255) << 8) |
                        (byteArray2[1] & 255))) +
                (((byteArray2[2] & 255) << 8) |
                        (byteArray2[3] & 255))) +
                (((byteArray3[0] & 255) << 8) |
                        (byteArray3[1] & 255))) +
                (((byteArray3[2] & 255) << 8) |
                        (byteArray3[3] & 255)),
                byteArray, i, i2);
    }


    public void parseFrame(byte[] byteArray, int i, byte[] byteArray2, int i2, int i3) {

        b = i3 + 28;
        byte[] byteArray3 = a;
        byteArray3[0] = (byte)69;
        byteArray3[1] = (byte)0;
        byteArray3[2] = (byte)(b >> 8);
        byteArray3[3] = (byte)b;
        byteArray3[4] = (byte)0;
        byteArray3[5] = (byte)0;
        byteArray3[6] = (byte)64;
        byteArray3[7] = (byte)0;
        byteArray3[8] = (byte)64;
        byteArray3[9] = (byte)17;
        byteArray3[10] = (byte)0;
        byteArray3[11] = (byte)0;
        byteArray3[12] = byteArray[0];
        byteArray3[13] = byteArray[1];
        byteArray3[14] = byteArray[2];
        byteArray3[15] = byteArray[3];
        byteArray3[16] = byteArray2[0];
        byteArray3[17] = byteArray2[1];
        byteArray3[18] = byteArray2[2];
        byteArray3[19] = byteArray2[3];
        short a = a(byteArray3, 0, 20);
        byteArray3[10] = (byte)(a >> 8);
        byteArray3[11] = (byte)a;
        byteArray3[20] = (byte)(i >> 8);
        byteArray3[21] = (byte)i;
        byteArray3[22] = (byte)(i2 >> 8);
        byteArray3[23] = (byte)i2;
        byteArray3[24] = (byte)((i3 + 8) >> 8);
        byteArray3[25] = (byte)(i3 + 8);
        byteArray3[26] = (byte)0;
        byteArray3[27] = (byte)0;
        a = b(byteArray3, 20, i3 + 8, byteArray, byteArray2);
        byteArray3[26] = (byte)(a >> 8);
        byteArray3[27] = (byte)a;


    }


    public void parseFrame(byte[] byteArray, int i, byte[] byteArray2, int i2, int i3, int i4, int i5, int i6, int i7) {
        b = i7 + 40;
        byte[] byteArray3 = this.a;
        byteArray3[0] = (byte)69;
        byteArray3[1] = (byte)0;
        byteArray3[2] = (byte)(b >> 8);
        byteArray3[3] = (byte)b;
        byteArray3[4] = (byte)0;
        byteArray3[5] = (byte)0;
        byteArray3[6] = (byte)64;
        byteArray3[7] = (byte)0;
        byteArray3[8] = (byte)64;
        byteArray3[9] = (byte)6;
        byteArray3[10] = (byte)0;
        byteArray3[11] = (byte)0;
        byteArray3[12] = byteArray[0];
        byteArray3[13] = byteArray[1];
        byteArray3[14] = byteArray[2];
        byteArray3[15] = byteArray[3];
        byteArray3[16] = byteArray2[0];
        byteArray3[17] = byteArray2[1];
        byteArray3[18] = byteArray2[2];
        byteArray3[19] = byteArray2[3];
        short a = a(byteArray3, 0, 20);
        byteArray3[10] = (byte)(a >> 8);
        byteArray3[11] = (byte)a;
        byteArray3[20] = (byte)(i >> 8);
        byteArray3[21] = (byte)i;
        byteArray3[22] = (byte)(i2 >> 8);
        byteArray3[23] = (byte)i2;
        byteArray3[24] = (byte)(i3 >> 24);
        byteArray3[25] = (byte)(i3 >> 16);
        byteArray3[26] = (byte)(i3 >> 8);
        byteArray3[27] = (byte)i3;
        byteArray3[28] = (byte)(i4 >> 24);
        byteArray3[29] = (byte)(i4 >> 16);
        byteArray3[30] = (byte)(i4 >> 8);
        byteArray3[31] = (byte)i4;
        byteArray3[32] = (byte)80;
        byteArray3[33] = (byte)i5;
        byteArray3[34] = (byte)(i6 >> 8);
        byteArray3[35] = (byte)i6;
        byteArray3[36] = (byte)0;
        byteArray3[37] = (byte)0;
        byteArray3[38] = (byte)0;
        byteArray3[39] = (byte)0;
        a = parseFrame(byteArray3, 20, i7 + 20, byteArray, byteArray2);
        byteArray3[36] = (byte)(a >> 8);
        byteArray3[37] = (byte)a;
    }

    public void parseFrame(byte[] byteArray, int i, byte[] byteArray2, int i2, int i3, int i4, int i5, int i6, int i7, int i8) {
        b = (i7 + 40) + 4;
        byte[] byteArray3 = this.a;
        byteArray3[0] = (byte)69;
        byteArray3[1] = (byte)0;
        byteArray3[2] = (byte)(b >> 8);
        byteArray3[3] = (byte)b;
        byteArray3[4] = (byte)0;
        byteArray3[5] = (byte)0;
        byteArray3[6] = (byte)64;
        byteArray3[7] = (byte)0;
        byteArray3[8] = (byte)64;
        byteArray3[9] = (byte)6;
        byteArray3[10] = (byte)0;
        byteArray3[11] = (byte)0;
        byteArray3[12] = byteArray[0];
        byteArray3[13] = byteArray[1];
        byteArray3[14] = byteArray[2];
        byteArray3[15] = byteArray[3];
        byteArray3[16] = byteArray2[0];
        byteArray3[17] = byteArray2[1];
        byteArray3[18] = byteArray2[2];
        byteArray3[19] = byteArray2[3];
        short a = a(byteArray3, 0, 20);
        byteArray3[10] = (byte)(a >> 8);
        byteArray3[11] = (byte)a;
        byteArray3[20] = (byte)(i >> 8);
        byteArray3[21] = (byte)i;
        byteArray3[22] = (byte)(i2 >> 8);
        byteArray3[23] = (byte)i2;
        byteArray3[24] = (byte)(i3 >> 24);
        byteArray3[25] = (byte)(i3 >> 16);
        byteArray3[26] = (byte)(i3 >> 8);
        byteArray3[27] = (byte)i3;
        byteArray3[28] = (byte)(i4 >> 24);
        byteArray3[29] = (byte)(i4 >> 16);
        byteArray3[30] = (byte)(i4 >> 8);
        byteArray3[31] = (byte)i4;
        byteArray3[32] = (byte)96;
        byteArray3[33] = (byte)i5;
        byteArray3[34] = (byte)(i6 >> 8);
        byteArray3[35] = (byte)i6;
        byteArray3[36] = (byte)0;
        byteArray3[37] = (byte)0;
        byteArray3[38] = (byte)0;
        byteArray3[39] = (byte)0;
        byteArray3[40] = (byte)2;
        byteArray3[41] = (byte)4;
        byteArray3[42] = (byte)(i8 >> 8);
        byteArray3[43] = (byte)i8;
        a = parseFrame(byteArray3, 20, (i7 + 20) + 4, byteArray, byteArray2);
        byteArray3[36] = (byte)(a >> 8);
        byteArray3[37] = (byte)a;
    }



    public boolean parseFrame() {

        if (c) {
            return c;
        }

        e = (a[0] >> 4) & 15;
        if (e == 4) {
            f = (a[0] & 15) * 4;
            g = ((a[2] & 255) << 8) + (a[3] & 255);
            h = a[8] & 255;
            i = a[9] & 255;
            j = Arrays.copyOfRange(a, 12, 16);
            k = Arrays.copyOfRange(a, 16, 20);
            int i = f;

            switch (i) {
                case 1:
                    c = false;
                    Log.d(TAG, "parseFrame(): an ICMP packet");
                    break;
                case 6:
                    l = ((a[i] & 255) << 8) +
                            (a[i + 1] & 255);

                    m = ((a[i + 2] & 255) << 8) +
                            (a[i + 3] & 255);

                    n = ((((a[i + 4] & 255) << 24) +
                            ((a[i + 5] & 255) << 16)) +
                            ((a[i + 6] & 255) << 8)) +
                            (a[i + 7] & 255);

                    o = ((((a[i + 8] & 255) << 24) +
                            ((a[i + 9] & 255) << 16)) +
                            ((a[i + 10] & 255) << 8)) +
                            (a[i + 11] & 255);

                    p = (((a[i + 12] >> 4) & 15) * 4) + i;

                    q = a[i + 13];

                    r = (a[i + 15] & 255) +
                            ((a[i + 14] & 255) << 8);

                    c = true;

                    break;
                case 17:
                    l = ((a[i] & 255) << 8) +
                            (a[i + 1] & 255);

                    m = (a[i + 3] & 255) + ((a[i + 1] & 255));

                    c = true;

                    break;
                default:
                    c = false;
                    Log.w(TAG, "parseFrame(): unknown IPv4 application protocol: " + i);
                    break;

            }
        }

        c = false;

        Log.w(TAG, "parseFrame(): an IPv6 packet");

        return c;
    }


    public boolean b() {
        return (i == 6);
    }

    public boolean c() {
        return (i == 17);
    }

    public boolean d() {

        if ((i != 17) || m != 53) {
            return false;
        }

        String a = a.a(a, 40);


        return false;
    }


    public boolean e() {
        return (q & 2) != 0;
    }

    public boolean f() {
        return (q & 4) != 0;
    }


    public String gGetIP() {
        return String.format("%d.%d.%d.%d",
                new Object[] {
                        Integer.valueOf(j[0] & 255),
                        Integer.valueOf(j[1] & 255),
                        Integer.valueOf(j[2] & 255),
                        Integer.valueOf(j[3] & 255)
                });
    }

    public String hGetIP() {
        return String.format("%d.%.d%.d%.d%",
                new Object[] {
                        Integer.valueOf(k[0] & 255),
                        Integer.valueOf(k[1] & 255),
                        Integer.valueOf(k[2] & 255),
                        Integer.valueOf(k[3] & 255)
                });
    }


    public String iGetIPCommand() {

        if (!b()) {

        }
    }

}
