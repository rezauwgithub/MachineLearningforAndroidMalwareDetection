package net.nitroservices.rezan.mlforandroidmalwaredetection;

import android.os.Build;
import android.util.Log;

import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetSocketAddress;
import java.net.SocketAddress;

/**
 * Created by rezan on 12/9/16.
 */

public class PacketCaptureTag extends Thread {

    private static final String TAG = "PacketCaptureTag";


    private FileInputStream fileInputStream;


    private e var2;


    public PacketCaptureTag(FileDescriptor fileDescriptor, e var2) {
        fileInputStream = new FileInputStream(fileDescriptor);
        this.var2 = var2;
    }


    private void sendNewDatagramPacket() {
        SocketAddress inetSocketAddress = new InetSocketAddress("8.8.8.8", 53);
        byte[] bytes = "".getBytes();

        try {
            new DatagramSocket().send(new DatagramPacket(bytes, bytes.length, inetSocketAddress));

        } catch (Throwable throwable) {
            Log.e(TAG, Log.getStackTraceString(throwable));
        }

    }

    private void closeFileInputStream() {
        interrupt();

        try {
            if (fileInputStream != null) {
                fileInputStream.close();
                fileInputStream = null;
            }

        } catch (IOException ioEx) {
            Log.e(TAG, "cannot close FileInputStream in");
        }



    }



    public void run() {
        Object obj = new Byte[1500];

        do {
            try {


            }
            catch (Throwable throwable) {
                Log.w(TAG, )

            }


        } while (((isInterrupted() ? 0 : 1) & (fileInputStream != null ? 1 : 0)) != 0);
    }


}
