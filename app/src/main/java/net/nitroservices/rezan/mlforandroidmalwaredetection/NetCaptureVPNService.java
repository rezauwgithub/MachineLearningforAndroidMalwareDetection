package net.nitroservices.rezan.mlforandroidmalwaredetection;

import android.content.Intent;
import android.net.VpnService;
import android.os.Handler;
import android.os.Message;
import android.os.ParcelFileDescriptor;
import android.util.Log;
import android.widget.Toast;

import java.io.FileInputStream;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.nio.ByteBuffer;
import java.util.Enumeration;

/**
 * Created by rezan on 10/28/16.
 */

public class NetCaptureVPNService extends VpnService implements Handler.Callback, Runnable {


    private static final String TAG = "NetCaptureVPNService";

    private Handler mHandler;
    private Thread mThread;

    private ParcelFileDescriptor mInterface;


    private boolean runVpnConnection() throws Exception {

        configure();

        FileInputStream input = new FileInputStream(mInterface.getFileDescriptor());

        // Allocate the buffer for a single packet.
        ByteBuffer packet = ByteBuffer.allocate(32767);

        // We keep forwarding packets till something goes wrong.
        while (true) {

            // Assume that we did not make any progress in this iteration.
            boolean idle = true;

            // Read the outgoing packet from the input stream.
            int length = input.read(packet.array());
            if (length > 0) {

                Log.i(TAG, "************new packet");

                System.exit(-1);

                while (packet.hasRemaining()) {

                    Log.i(TAG, Byte.toString(packet.get()));
                    //System.out.print((char)packet.get());
                }

                packet.limit(length);
                packet.clear();

                // There might be more outgoing packets.
                idle = false;
            }


            Thread.sleep(50);
        }
    }


    private void configure() throws Exception {

        // If the old interface has exactly the same parameters, use it!
        if (mInterface != null) {
            Log.i(TAG, "Using the previous interface");

            return;
        }


        // Configure a builder while parsing the parameters.
        Builder builder = new Builder();
        builder.setMtu(1500);
        builder.addAddress("192.168.0.6", 24); // was wrong, you need to put an internal IP
        // builder.addRoute("0.0.0.0", 0); // needs to be this.

        try {
            mInterface.close();
        } catch (Exception ex) {
            // ignore
        }

        mInterface = builder.establish();
    }




    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {

        // The handler is only used to show message.
        if (mHandler == null) {
            mHandler = new Handler(this);
        }

        // Stop the previous session by interrupting the thread.
        if (mThread != null) {
            mThread.interrupt();
        }

        // Start a new session by creating a new thread.
        mThread = new Thread(this, "NetCaptureVpnThread");
        mThread.start();


        return START_STICKY;
    }


    @Override
    public void onDestroy() {

        if (mThread != null) {
            mThread.interrupt();
        }

    }


    @Override
    public boolean handleMessage(Message message) {

        if (message != null) {
            Toast.makeText(this, message.what, Toast.LENGTH_SHORT).show();
        }

        return true;
    }


    @Override
    public synchronized void run() {

        Log.i(TAG, "running vpnService");

        try {
            runVpnConnection();
        } catch (Exception ex) {
            ex.printStackTrace();

            Log.e(TAG, "Got " + ex.toString());

        } finally {
            try {
                mInterface.close();
            } catch (Exception ex) {
                // ignore
            }

            mInterface = null;

            mHandler.sendEmptyMessage(R.string.disconnected);
            Log.i(TAG, "Exiting");
        }

    }


    public String getLocalIPAddress() {

        try {
            for (Enumeration<NetworkInterface> en = NetworkInterface.getNetworkInterfaces(); en.hasMoreElements();) {

                NetworkInterface networkInterface = en.nextElement();

                for (Enumeration<InetAddress> enumIPAddress = networkInterface.getInetAddresses(); enumIPAddress.hasMoreElements();) {

                    InetAddress inetAddress = enumIPAddress.nextElement();

                    Log.i(TAG, "****** INET ADDRESS ****** ");
                    Log.i(TAG, "address: " + inetAddress.getHostAddress());
                    Log.i(TAG, "hostname: " + inetAddress.getHostName());
                    Log.i(TAG, "address:toString(): " + inetAddress.getHostAddress().toString());

                    if (!inetAddress.isLoopbackAddress()) {

                        Log.i(TAG, "IS NOT LOOPBACK ADDRESS: " + inetAddress.getHostAddress().toString());

                        return inetAddress.getHostAddress().toString();
                    }


                    Log.i(TAG, "It is a loopback address");

                }

            }
        } catch (SocketException ex) {

            String LOG_TAG = null;
            Log.e(LOG_TAG, ex.toString());
        }

        return null;
    }



}
