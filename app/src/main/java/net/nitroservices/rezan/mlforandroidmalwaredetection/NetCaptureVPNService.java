package net.nitroservices.rezan.mlforandroidmalwaredetection;

import android.app.PendingIntent;
import android.content.Intent;
import android.net.VpnService;
import android.os.Handler;
import android.os.Message;
import android.os.ParcelFileDescriptor;
import android.util.Log;
import android.widget.Toast;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.DatagramChannel;

/**
 * Created by rezan on 10/28/16.
 */

public class NetCaptureVPNService extends VpnService implements Handler.Callback, Runnable {


    private static final String TAG = "NetCaptureVPNService";


    private String serverIPAddress;
    private String serverPortNumber;
    private byte[] sharedSecret;
    private PendingIntent configureIntent;

    private Handler handler;
    private Thread thread;

    private ParcelFileDescriptor parcelFD;
    private String parameters;


    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {

        // The handler is only used to show message.
        if (handler == null) {
            handler = new Handler(this);
        }

        // Stop the previous session by interrupting the thread.
        if (thread != null) {
            thread.interrupt();
        }


        // Extract information from the intent.
        String prefix = getPackageName();
        serverIPAddress = intent.getStringExtra(prefix + ".ADDRESS");
        serverPortNumber = intent.getStringExtra(prefix + ".PORT");
        sharedSecret = intent.getStringExtra(prefix + ".SECRET").getBytes();


        // Start a new session by creating a new thread.
        thread = new Thread(this, "NetCaptureVpnThread");
        thread.start();


        return START_STICKY;
    }


    @Override
    public void onDestroy() {

        if (thread != null) {
            thread.interrupt();
        }

    }


    @Override
    public boolean handleMessage(Message message) {

        if (message != null) {
            Toast.makeText(this, message.what, Toast.LENGTH_SHORT).show();
        }

        return true;
    }


    @Override
    public synchronized void run() {

        try {

            Log.i(TAG, "Starting vpnService");


            // If anything needs to be obtained using the network, get it now.
            // This greatly reduces the complexity of seamless handover, which
            // tries to recreate the tunnel without shutting down everything.
            // In this Class, all we need to know is the server address.
            InetSocketAddress server = new InetSocketAddress(
                    serverIPAddress, Integer.parseInt(serverPortNumber));


            // We try to create the tunnnel for several times. The better way
            // is to work with ConnectivityManager, such as trying only when
            // the network is available. Here we just use a counter to keep
            // things simple.
            for (int attempt = 0; attempt < 10; attempt++) {
                handler.sendEmptyMessage(R.string.connecting);

                // Reset the counter if we were connected.
                if (run(server)) {
                    attempt = 0;
                }


                // Sleep for a while. This also checks if we got interrupted.
                Thread.sleep(3000);

            }

            Log.i(TAG, "Giving up");

    } catch (Exception ex) {
            Log.e(TAG, "Got " + ex.toString());
        } finally {
            try {

                parcelFD.close();

            } catch (Exception ex) {
                // ignore
            }

            parcelFD = null;
            parameters = null;

            handler.sendEmptyMessage(R.string.disconnected);

            Log.i(TAG, "Exiting");
        }
    }


    private boolean run(InetSocketAddress server) throws Exception {

        DatagramChannel tunnel = null;
        boolean connected = false;

        try {
            // Create a DatagramChannel as the VPN tunnel.
            tunnel = DatagramChannel.open();

            // Protect the tunnel before connecting to avoid loopback.
            if (!protect(tunnel.socket())) {
                throw new IllegalStateException("Cannot protect the tunnel");
            }


            // Connect to the server
            tunnel.connect(server);

            // For simplicity, we use the same thread for both reading and
            // writing. Here we put the tunnel onto non-blocking mode.
            tunnel.configureBlocking(false);


            // Authenticate and configure the virtual network interface.
            handshake(tunnel);

            // Now we are connected. Set the flag and show the message.
            connected = true;
            handler.sendEmptyMessage(R.string.connected);

            // Packets to be sent are queued in this input stream.
            FileInputStream in = new FileInputStream(parcelFD.getFileDescriptor());

            // Packets received need to be written to this output stream.
            FileOutputStream out = new FileOutputStream(parcelFD.getFileDescriptor());

            // Allocate the buffer for a single packet.
            ByteBuffer packet = ByteBuffer.allocate(32767);

            // We use timer to determine the status of the tunnel. It
            // works on both sides. A positive value means sending, and
            // any other means receiving. We start with receiving.
            int timer = 0;

            // We keep forwarding packets till something goes wrong.
            while (true) {

                // Assume that we did not make any progress in this iteration.
                boolean idle = true;

                // Read the outgoing packet from the input stream.
                int length = in.read(packet.array());
                if (length > 0) {

                    // Write the outgoing packet to the tunnel.
                    packet.limit(length);
                    tunnel.write(packet);
                    packet.clear();

                    // There might be more outgoing packets.
                    idle = false;

                    // If we were receiving, switch to sending.
                    if (timer < 1) {
                        timer = 1;
                    }

                }


                // Read the incoming packet from the tunnel.
                length = tunnel.read(packet);
                if (length > 0) {

                    // Ignore control message, while start with zero.
                    if (packet.get(0) != 0) {

                        // Write the incoming packet to the output stream.
                        out.write(packet.array(), 0, length);

                    }

                    packet.clear();


                    // There might be more incoming packets.
                    idle = false;

                    // If we were sending, switch to receiving.
                    if (timer > 0) {
                        timer = 0;
                    }


                }



                // If we are idle or waiting for the network, sleep for a
                // fraction of time to avoid busy looping.
                if (idle) {

                    Thread.sleep(100);

                    // Increase the timer. This is inaccurate but good enough,
                    // since everything is operated in not-blocking mode.
                    timer += (timer > 0) ? 100 : -100;

                    // We are receiving fro a long time but not sending.
                    if (timer < -15000) {

                        // Send empty control messages.
                        packet.put((byte)0).limit(1);

                        for (int i = 0; i < 3; i++) {

                            packet.position(0);
                            tunnel.write(packet);

                        }

                        packet.clear();

                        // Switch to sending.
                        timer = 1;

                    }


                    // We are sending for a long time but not receiving.
                    if (timer > 20000) {
                        throw new IllegalStateException("Timed out");
                    }

                }

            }


        } catch (InterruptedException ex) {

            throw ex;

        } catch (Exception ex) {

            Log.e(TAG, "Got " + ex.toString());

        } finally {

            try {
                 tunnel.close();
            }catch (Exception ex) {
                // ignore
            }

        }


        return connected;
    }



    private void handshake(DatagramChannel tunnel) throws Exception {

        // To build a secure tunnel, we should perform mutual authentication
        // and exchange session keys for encryption. To keep things simply in
        // this Class, we just send the shared secret in plaintext and wait
        // for the server to send the parameters.

        // Allocate the buffer for handshaking.
        ByteBuffer packet = ByteBuffer.allocate(1024);

        // Control messages always start with zero.
        packet.put((byte)0).put(sharedSecret).flip();

        // Send the secret several times in case of packet loss.
        for (int i = 0; i < 3; i++) {
            packet.position(0);
            tunnel.write(packet);
        }

        packet.clear();


        // Wait for the parameters within a limited time.
        for (int i = 0; i < 50; i++) {

            Thread.sleep(100);

            // Normally we should not receive random packets.
            int length = tunnel.read(packet);
            if (length > 0 && packet.get(0) == 0) {

                configure(new String(packet.array(), 1, length - 1).trim());

                return;
            }

        }

        throw new IllegalStateException("Timed out");
    }


    private void configure(String parameters) throws Exception {

        // If the old interface has exactly the same parameters, use it!
        if (parcelFD != null && parameters.equals(parameters)) {

            Log.i(TAG, "Using the previous interface");

            return;
        }


        // Configure a builder while parsing the parameters.
        Builder builder = new Builder();

        for (String parameter : parameters.split(" ")) {

            String[] fields = parameters.split(",");

            try {

                switch (fields[0].charAt(0)) {
                    case 'm':
                        builder.setMtu(Short.parseShort(fields[1]));
                        break;
                    case 'a':
                        builder.addAddress(fields[1], Integer.parseInt(fields[2]));
                        break;
                    case 'r':
                        builder.addRoute(fields[1], Integer.parseInt(fields[2]));
                        break;
                    case 'd':
                        builder.addDnsServer(fields[1]);
                        break;
                    case 's':
                        builder.addSearchDomain(fields[1]);
                        break;

                }

            } catch (Exception ex) {
                throw new IllegalArgumentException("Bad parameter: " + parameter);
            }

        }


        // Create a new interface using the builder and save the parameters.
        parcelFD = builder.setSession(serverIPAddress).setConfigureIntent(configureIntent).establish();

        this.parameters = parameters;

        Log.i(TAG, "New interface: " + parameters);

    }


}
